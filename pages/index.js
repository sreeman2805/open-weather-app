import Head from 'next/head'
import Image from 'next/image'
import axios from 'axios'
import { useState } from 'react'
import { BsSearch } from 'react-icons/bs'
import { AiOutlineClose } from 'react-icons/ai'
import Weather from '../components/Weather'
import Spinner from '../components/Spinner'

export default function Home() {
  const [city, setCity] = useState("");
  const [weather, setWeather] = useState({});
  const [cityTime, setCityTime] = useState({})
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [cache, setCache] = useState([]);

  const fetchWeather = (e) => {
    const weatherURL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;

    const cityTimeURL = `https://timezone.abstractapi.com/v1/current_time/?api_key=${process.env.NEXT_PUBLIC_TIME_KEY}&location=${city}`;

    e.preventDefault()
    setLoading(true)
    setErrorMessage('')
    if(city){
      // ### Get Weather data ###
      axios.get(weatherURL).then((response) => {
        setWeather(response.data)
        setCache(prev => [...prev, city])
      })//.catch((err) => console.error(err))
      .catch((err) => {
        setWeather("")
        err?.response.status === 404 && setErrorMessage(err)
      })

      // ### Get Time data ###
      axios.get(cityTimeURL)
      .then((response) => {
        setCityTime(response.data)
      })
      .catch((err) => {
        setCityTime("")
        console.error(err)
      })
    }
    setLoading(false)
  }

  return (
    <div className="absolute object-cover bg-black/50 z-[9] p-4 text-center max-[500px]:h-[250%] min-h-full min-w-full">
      <Head>
        <title>Weather - Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Heading */}
      <h1 className='relative flex justify-center items-center max-w-[500px] w-full m-auto pt-16 text-gray-300 text-6xl z-10'>Open Weather App</h1>

      {/* Search */}
      <div className='relative flex flex-col justify-between items-center max-w-[500px] w-full m-auto pt-4 mt-8 text-white z-10'>
        <form onSubmit={fetchWeather} className='flex justify-between items-center w-full m-auto p-3 bg-transparent border border-gray-300 text-white rounded-2xl'>
          <div>
            <input onChange={(e) => setCity(e.target.value)} className='bg-transparent border-none text-white focus:outline-none text-2xl placeholder:text-gray-400 w-[400px] pl-4' type="text" placeholder='Search city' value={city} />
          </div>
          <button type='button' className='mr-4' onClick={()=>setCity('')}><AiOutlineClose size={25} /></button>
          <button type='submit' className='mr-4'><BsSearch size={25} /></button>
        </form>
      </div>

      {/* Weather */}
      <p className='text-2xl relative flex justify-center max-w-[500px] w-full m-auto pt-4 text-gray-300 z-10'>{errorMessage &&  "Sorry, no records for city."}</p>
      <div>{loading ? <Spinner /> : weather?.main ? <Weather data={weather} datatime={cityTime} fetchWeather={fetchWeather} setCity={setCity} temp={cache} /> : null}</div>

    </div>
  )
}
